git init
git status
git add octocat.txt
	staged:Files are ready to be committed.
	unstaged:Files with changes that have not been prepared to be committed.
	untracked:Files aren't tracked by Git yet. This usually indicates a newly created file.
	deleted:File has been deleted and is waiting to be removed from Git.
git status
	git add -A .
	git reset:You can use git reset <filename> to remove a file or files from the staging area.
git commit -m "Add cute octocat story"
	Staging Area:A place where we can group files together before we "commit" them to Git.
	Commit:A "commit" is a snapshot of our repository. 
git add '*.txt'
	Wildcards:We need quotes so that Git will receive the wildcard before our shell can interfere with it. Without quotes our shell will only execute the wildcard search within the current directory. 
git commit -m 'Add all the octocat txt files'
	Make sure to check what files and folders are staged by using git status before you do the actual commit.
git log
	Use git log --summary to see more information for each commit.
git remote add origin https://github.com/try-git/try_git.git
	This command remote takes a remote name and a repository URL
	git remote:Git doesn't care what you name your remotes, but it's typical to name your main one origin.
git push -u origin master
	The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do.
git pull origin master
	We can check for changes on our GitHub repository and pull down any new changes.
	git stash:Sometimes when you go to pull you may have changes you don't want to commit just yet. One option you have, other than commiting, is to stash the changes.
	Use the command 'git stash' to stash your changes, and 'git stash apply' to re-apply your changes after your pull.
git diff HEAD
	HEAD:The HEAD is a pointer that holds your position within all your different commits. By default HEAD points to your most recent commit, so it can be used as a quick way to reference that commit without having to look up the SHA.
git add octofamily/octodog.txt
	Remember, staged files are files we have told git that are ready to be committed.
git diff --staged
	--staged: option to see the changes you just staged
git reset octofamily/octodog.txt
	You can unstage files by using the git reset command. Go ahead and remove octofamily/octodog.txt.
git checkout -- octocat.txt
	Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>. Go ahead and get rid of all the changes since the last commit for octocat.txt
	 '--': git checkout seems to work fine without it. It's simply promising the command line that there are no more options after the '--'.
git branch clean_up
	When developers are working on a feature or bug they'll often create a copy (aka. branch) of their code they can make separate commits to. Then when they're done they can merge this branch back into their main master branch.
	Branching:Branches are what naturally happens when you want to work on multiple features at the same time.
git branch
	Now if you type git branch you'll see two local branches: a main branch named master and your new branch named clean_up.
	git checkout -b new_branch: to checkout and create a branch at the same time. This is the same thing as doing:
		git branch new_branch
		git checkout new_branch
git checkout clean_up
git rm '*.txt'
	Removing one file is great and all, but what if you want to remove an entire folder? You can use the recursive option on git rm:
		git rm -r folder_of_cats
git commit -m 'Remove all octocat files'
git checkout master
git merge clean_up
	Merge Conflicts can occur when changes are made to a file at the same time. A lot of people get really scared when a conflict happens, but fear not! They aren't that scary, you just need to decide which code to keep.
git branch -d -f clean_up

git reset HEAD hello.html
git checkout hello.html
git status

git revert HEAD
git tag oops
git reset --hard v1
git hist --all
git tag -d oops

git add hello.html
git commit -m "Add an author comment"
git add hello.html
git commit --amend -m "Add an author/email comment"

ls -C .git
ls -C .git/objects
ls -C .git/objects/<dir>
cat .git/config

ls .git/refs
ls .git/refs/heads
ls .git/refs/tags
cat .git/refs/tags/v1

cat .git/HEAD

git hist --max-count=1
git cat-file -t <hash>
git cat-file -p <hash>
git cat-file -p <treehash>
git cat-file -p <libhash>
git cat-file -p <hellohash>

	